{"version":3,"sources":["logo.svg","components/login.js","components/Dashboard.js","components/Logout.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","loginHandler","e","setState","target","name","value","loginForm","preventDefault","console","log","state","password","fetch","method","header","body","JSON","stringify","userName","userPassword","then","response","json","responseJson","localStorage","setItem","window","location","reload","catch","error","redirect","token","getItem","to","this","className","onSubmit","type","placeholder","onChange","Component","Dashboard","href","Logout","removeItem","noMatch","Header","exact","path","component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9861e4ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\nimport { Redirect,Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nclass Login extends Component{\r\n\r\n     constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            name:'',\r\n            password:'',\r\n            redirect:false\r\n        }\r\n     }\r\n     loginHandler=e=>{\r\n         this.setState({\r\n             [e.target.name]:e.target.value\r\n         })\r\n     }\r\n     loginForm=e=>{\r\n\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        const {name,password}=this.state;\r\n       fetch('http://localhost/banking/server/login.php',{\r\n         method:'post',\r\n         header:{\r\n           'Accept':'application/json',\r\n           'Content-Type':'application/json'\r\n         },\r\n         body:JSON.stringify({\r\n           userName:name,\r\n           userPassword:password\r\n         })\r\n       })\r\n       .then((response)=>response.json())\r\n         .then((responseJson)=>{\r\n         let responseData=JSON.stringify(responseJson);\r\n         //alert(responseData);\r\n         console.log(responseJson);\r\n         localStorage.setItem('token',responseJson);\r\n         window.location.reload(false);\r\n       })\r\n       .catch((error)=>{\r\n         console.error(error);\r\n       })\r\n     }\r\n\r\n   \r\n     render(){\r\n\r\n      var token= localStorage.getItem('token');\r\n      console.log(\"token volue is in login=\"+token);\r\n      if(token!=null){\r\n        return <Redirect to=\"/dashboard\"/>\r\n      }\r\n      \r\n         const {name,password}=this.state;\r\n          return(\r\n              <div>\r\n                  <div className=\"container\">\r\n                      <div className=\"login-wrap\">\r\n                 <div className=\"col-md-12\">\r\n                 <div className=\"\"></div>\r\n               <form  onSubmit={this.loginForm} className=\"formCtrl\">\r\n                 \r\n                 <div className=\"form-group divInputCtr\">\r\n                   <input type=\"text\" placeholder=\"Name\" className=\"form-control\" onChange={this.loginHandler} value={name} name=\"name\"/>\r\n                 </div>\r\n                 <div className=\"form-group divInputCtr\">\r\n                   <input type=\"password\" placeholder=\"Password\" className=\"form-control\" onChange={this.loginHandler} value={password} name=\"password\"/>\r\n                 </div>\r\n     \r\n                 <hr />\r\n                 <input type=\"submit\" className=\"btn logBtn\" value=\"Login\" />\r\n                \r\n               </form>\r\n         \r\n             </div>\r\n           </div>\r\n           </div>\r\n\r\n              </div>\r\n          )\r\n\r\n     }\r\n}\r\n\r\nexport default Login;","import React,{Component} from 'react';\r\nimport { Redirect,Link} from 'react-router-dom';\r\nimport  {Tab,Tabs,TabList,TabPanel} from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nclass Dashboard extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n       \r\n    }\r\n    render(){\r\n\r\n        const token=localStorage.getItem('token');\r\n        console.log(\"the token value is=\"+JSON.stringify(token));\r\n        if(token==null){\r\n            return <Redirect to=\"/\"/>\r\n          }\r\n      \r\n        return(\r\n            <div>\r\n               <div className=\"header\">\r\n               <nav className=\"\">\r\n                <div className=\"container-fluid\">\r\n                   \r\n                    <div>\r\n                    <ul>\r\n                       \r\n                        <li className=\"fltLeft\"><a href=\"#contact\" className=\"fltStyle\">Welcome in Banking portal</a></li>\r\n                        <li className=\"fltRight\"><a href=\"/logout\" className=\"fltStyle\">Logout</a></li>\r\n                       \r\n                       \r\n                    </ul>\r\n                    </div>\r\n                </div>\r\n                </nav>\r\n                </div> \r\n            <Tabs>\r\n                <TabList>\r\n                <Tab>Dashboard</Tab>\r\n                <Tab>Customer</Tab>\r\n                <Tab>Deposit</Tab>\r\n                <Tab>Withdrawal</Tab>\r\n                <Tab>Search</Tab>\r\n                <Tab>Calculator</Tab>\r\n                <Tab>Modify</Tab>\r\n                <Tab>Transaction</Tab>\r\n                <Tab>Record</Tab>\r\n                </TabList>\r\n                <TabPanel>Dashboard</TabPanel>\r\n                <TabPanel>Customer</TabPanel>\r\n                <TabPanel>Deposit</TabPanel>\r\n                <TabPanel>Withdrawal</TabPanel>\r\n                <TabPanel>Search</TabPanel>\r\n                <TabPanel>Calculator</TabPanel>\r\n                <TabPanel>Modify</TabPanel>\r\n                <TabPanel>Transaction</TabPanel>\r\n                <TabPanel>Record</TabPanel>\r\n             </Tabs>  \r\n                \r\n                \r\n                \r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React,{Component} from 'react';\r\nimport { Redirect,Link } from 'react-router-dom';\r\n\r\nclass Logout extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        localStorage.removeItem('token');\r\n    }\r\n    render(){\r\n        let token= localStorage.getItem('token');\r\n        console.log(\"now token is=\"+token);\r\n        if(token==null){\r\n            return <Redirect to=\"/\"/>\r\n          }\r\n       \r\n        return(\r\n            <div>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Logout;","import React from 'react';\r\nimport Login from './login';\r\nimport Dashboard from './Dashboard';\r\nimport Logout from './Logout';\r\nimport {BrowserRouter,Route,Link,Switch} from 'react-router-dom';\r\n\r\nconst Header=()=>{\r\n    \r\n     return(\r\n         <div>\r\n             <BrowserRouter>\r\n               <Switch>\r\n                  <Route exact path=\"/\" component={Login}/>\r\n                  <Route path=\"/dashboard\" component={Dashboard}/>\r\n                  <Route path=\"/logout\" component={Logout}/>\r\n                  <Route component={noMatch}/>\r\n               </Switch>\r\n             </BrowserRouter>\r\n         </div>\r\n     )\r\n}\r\n\r\nfunction noMatch(){\r\n    return(\r\n        <div>\r\n            <h1>400 error </h1>\r\n            <h4>Page not found</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from '../src/components/Header';\n\nfunction App() {\n  return (\n    <div>\n        <Header/>\n     </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n// import '../node_modules/bootstrap/dist/js/bootstrap.js';\n// import '../node_modules/bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}